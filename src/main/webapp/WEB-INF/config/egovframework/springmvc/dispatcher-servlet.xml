<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 지정된 패키지와 그 하위 패키지에서 스프링이 관리할 빈을 자동으로 검색하고 등록 -->
	<!-- base-package : 컴포넌트 스캔의 기준이 되는 패키지를 지정 -->
	<!-- 
		[include-filter]
		type="annotation" : 어노테이션 기반의 필터링
		expression="org.springframework.stereotype.Controller"
		:@Controller 어노테이션이 붙은 클래스만 포함
		
		[exclude-filter]
		위와 반대
		
		=> @Controller 어노테이션이 붙은 클래스들만 빈으로 등록, @Service와 @Repository는 제외된다 
		
		근데 context-common.xml 파일에선 이와 반대로 스캔을 하고 있다.
		먼저 레이어에 대해 알아보자
		레이어에는 3가지 종류가 있다
		화면 레이어 : (Presentation Layer) - JSP or Servlet 
		데이터 레이어 : (Data Layer / Persistence Layer) - DAO or ORM(ibatis) 
		비즈니스 레이어 : (Business Layer) Service
		
		[ContextLoaderListener](Root Application Context)는 전자정부 프레임워크에선 Context-*.xml, Spring STS에선 root-context.xml로 사용
		특징 
			1. 전체 계층 구조 최상단에 위치
			2. 서로 다른 Context에서 공유할 것을 등록 후 사용가능
			3. Servlet에 등록된 bean 이용이 불가
		
		[Web Application Context)(Servlet Context)는 전자정부 프레임워크에선 springmvc/*.xml, Spring STS에선 appServlet/servlet-context.xml로 사용
		특징
			1. 서블릿에서만 이용되는 Context
			2. 타 Servlet과 공유하기 위한 Bean은 Root Application Context에 등록 후 사용
			3. Dispatcher Servlet은 자신만의 Context를 생성, 초기화하고, 동시에 Root Application Context를 부모 Context 사용한다
			
		=> 정리하자만 비즈니스 레이어와 영속성 부분은 RAC에 등록하고 표현 레이어는 DispatcherServlet에 등록하도록 가이드되는데
		이유는 화면 처리부분이 여러개, 즉 서블릿이 여러개인 경우 상위 @Servie와 @Repository를 공유하기 위해서이다.
		하위에서 상위 빈을 참조할 수 있기 때문(반대는 불가능)
		
		근데 서블릿을 보통 하나만 사용하는데 이 이유는 무엇일까?
		1. 중앙 집중식 처리 : 모든 요청을 하나의 서블릿에서 처리함으로써 요청 처리 과정을 일관성 있게 관리할 수 있다.
		2. 공통 로직의 재사용 : 공통적인 작업을 Dispatcher Servlet에서 처리함으로써 코드의 중복을 줄일 수 있다
		3. 프론트 컨트롤러 패턴 적용 : DispatcherServlet은 프론트 컨트롤러 패턴을 구현한 것으로, 이 패턴은 한곳에서 받아 처리하고 결과를 클라이언트에게 반환하는 역할을 한다
	 -->
    <context:component-scan base-package="egovframework">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>

	<!-- 
		*HandlerMapping*
		이 인터페이스는 해당 요청 정보를 기준으로 어떤 컨트롤러를 사용할 것인가를 결정하는 인터페이스이다. 이 인터페이스는 여러 구현체를 가지고 있다
		[BeanNameUrlHandlerMapping]
		- 클래스명 그대로 빈(Bean)명을 url로 사용한다는 매핑 전략
		[SimpleUrlHandlerMapping]
		- url과 controller를 map에 담아 매핑할 수 있는 전략
		
		[RequestMappingHandlerMapping]
		- HTTP 요청을 적절한 컨트롤러 메소드로 매핑하고 처리하는데 대부분 이 구현체를 사용
		- 설정방법은 EnableWebMvc 어노테이션을 선언하거나 xml의 경우에는 <mvc:annotation-driven/>을 선언하면 된다.
		- RequestMapping Annotation이 붙은 Class, Method들을 대상으로 실제 URL에 Mapping하는 작업을 하는 클래스
		- webBindingInitializer는 요청으로 넘어온 값들을 실제 객체에 binding하는 과정의 중간 역할 등을 수행한다(타입변환, 데이터 검증)
		
		
		위 Mapping 방법들은 어떤 url에 어떤 컨트롤러를 결정하는 것까지만이다. 실제로 어떤 메소드를 호출해야하는지는 HandlerAdapter 인터페이스를 알아야 한다
		
		*HandlerAdapter*
		이 인터페이스는 HandlerMapping에서 결정된 핸들러 정보로 해당 메소드를 직접 호출해주는 스펙이다.
		[SimpleControllerHandlerAdapter]
		- Controller 인터페이스를 사용하면 이 어뎁터를 사용한다
		[HttpRequestHandlerAdapter]
		- HttpRequestHandler 인터페이스를 사용하면 해당 어뎁터를 사용한다
		[SimpleServletHandlerAdapter]
		- 클래스명 그대로 Servlet을 구현하면 된다. 기본적으로 설정이 되어 있지 않기 때문에 사용을 원하면 해당 어뎁터를 빈으로 등록해야 한다
		
		[RequestMappingHandlerAdapter]
		- 이것이 가장 많이 쓰는 어뎁터로 실제로 RequestMappingHandlerMapping과 대응되는 클래스이다.
	 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="webBindingInitializer">
            <bean class="egovframework.example.cmmn.web.EgovBindingInitializer"/>
        </property>
    </bean>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
        <property name="interceptors">
            <list>
                <ref bean="localeChangeInterceptor" />
            </list>
        </property>
    </bean>
    
    <!-- 다국어 설정용 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
    <!-- 쿠키를 이용한 Locale 이용시 <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/> -->
    <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
        <property name="paramName" value="language" />
    </bean>

	<!-- 
		예외가 발생했을 때 해당 예외에 따라 지정된 뷰로 이동하도록 설정 
		defaultErrorView : 매핑되지 않은 예외가 발생했을 때 보여줄 기본 에러 페이지를 지정
		exceptionMappings: 특정 예외 타입에 대해 대응되는 뷰를 매핑한다	
	-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="defaultErrorView" value="cmmn/egovError"/>
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.dao.DataAccessException">cmmn/dataAccessFailure</prop>
                <prop key="org.springframework.transaction.TransactionException">cmmn/transactionFailure</prop>
                <prop key="egovframework.rte.fdl.cmmn.exception.EgovBizException">cmmn/egovError</prop>
                <prop key="org.springframework.security.AccessDeniedException">cmmn/egovError</prop>
            </props>
        </property>
    </bean>

	<!-- 
		뷰 리졸버 설정 
		- 컨트롤러에서 반환하는 뷰 이름을 실제 뷰 파일로 해석하는 역할을 한다	
	-->
    <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="1"
	    p:viewClass="org.springframework.web.servlet.view.JstlView"
	    p:prefix="/WEB-INF/jsp/egovframework/example/" p:suffix=".jsp"/>

    <!-- For Pagination Tag -->
    <bean id="imageRenderer" class="egovframework.example.cmmn.web.EgovImgPaginationRenderer"/>

    <bean id="paginationManager" class="egovframework.rte.ptl.mvc.tags.ui.pagination.DefaultPaginationManager">
        <property name="rendererType">
            <map>
                <entry key="image" value-ref="imageRenderer"/>
            </map>
        </property>
    </bean>
	<!-- /For Pagination Tag -->

    <mvc:view-controller path="/cmmn/validator.do" view-name="cmmn/validator"/>
</beans>